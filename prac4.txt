-----------------------------------------------------------------------Practical 4 ----------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr4\BracketMatch.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

class Stack:
    def __init__(self):
        self.top = None
        self.size = 0

    def push(self, data):
        node = Node(data)
        if self.top:
            node.next = self.top
        self.top = node
        self.size += 1

    def pop(self):
        if self.top:
            data = self.top.data
            self.top = self.top.next
            self.size -= 1
            return data
        else:
            return None

    def is_empty(self):
        return self.size == 0

def check_brackets(statement):
    stack = Stack()
    for ch in statement:
        if ch in ('{', '[', '('):
            stack.push(ch)
        elif ch in ('}', ']', ')'):
            last = stack.pop()
            if last is None:
                return False
            if last == "{" and ch == "}":
                continue
            elif last == "[" and ch == "]":
                continue
            elif last == "(" and ch == ")":
                continue
            else:
                return False
    return stack.is_empty()

def main():
    print("Bracket Matching Application")
    while True:
        statement = input("\nEnter a statement to check balanced brackets (or type exit to quit): ")
        if statement.lower() == "exit":
            print("Exiting the program.")
            break
        if check_brackets(statement):
            print("The brackets are balanced.")
        else:
            print("The brackets are not balanced.")

if __name__ == "__main__":
    main()




XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr4\ListBasedqueue.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class ListQueue:
    def __init__(self):
        self.items=[]
        self.size=0
    def empty(self):
        return self.items==[]
    def enqueue(self,data):
        self.items.insert(0,data)
        self.size+=1
        print(f"'{data}' has been added to the queue.")
    def dequeue(self):
        if self.empty():
            return None
        data = self.items.pop()
        self.size -= 1
        print(f"'{data}' has been removed from the queue.")
        return data
    def size1(self):
        return self.size
    def display(self):
        if self.empty():
            print("Queue is Empty.")
        else:
            print("Current Queue:",self.items)
q1=ListQueue()
q1.enqueue(10)
q1.enqueue(58)
q1.enqueue(87)
q1.enqueue(98)
q1.enqueue(78)

print("The queue is:",q1.display())
print("The size of the queue is:",q1.size1())

print("Dequeued Element:",q1.dequeue())

print("The queue is:",q1.display())
print("The size of the queue is:",q1.size1())


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr4\NodeBasedqueue.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class Node:
    def __init__(self,data=None,next=None,prev=None):
        self.data=data
        self.next=next
        self.prev=prev

class Queue:
    def __init__(self):
        self.head=None
        self.tail=None
        self.count=0

    def enqueue(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head = new_node
            self.tail = self.head
        else:
            new_node.prev=self.tail
            self.tail.next=new_node
            self.tail=new_node
        self.count+=1
        print(f"'{data}' has been added to the queue.")

    def dequeue(self):
        if self.head is None:
            print("Queue is Empty.cannot dequeue.")
            return None
        current = self.head
        if self.count == 1:
            self.head=None
            self.tail=None
        else:
            self.head=self.head.next
            self.head.prev=None
        self.count-=1
        print(f"'{current.data}' has been removed from the queue.")
        return current.data
    
    def size(self):
        return self.count
    
    def display(self):
        if self.head is None:
            print('Queue is empty.')
        else:
            current = self.head
            print("current Queue:",end=" ")
            while current:
                print(current.data,end=" ")
                current = current.next
            print()
q1= Queue()
q1.enqueue(10)
q1.enqueue(58)
q1.enqueue(87)
q1.enqueue(98)
q1.enqueue(78)

print("The queue is:",q1.display())
print("The size of the queue is:",q1.size())

print("Dequeued Element:",q1.dequeue())

print("The queue is:",q1.display())
print("The size of the queue is:",q1.size())


        

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr4\stack.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class Stack:
    def __init__(self):
        self.items = []
    def is_empty(self):
        return len(self.items) == 0
    def push(self,data):
        self.items.append(data)
    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            raise IndexError("Stack is empty.")
    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        else:
            raise IndexError("Stack is empty.")
    def size(self):
        return len(self.items)
s1 = Stack()
s1.push(30)
s1.push(20)
s1.push(10)
print("The Element is",s1.peek())
print("Removed Element is:",s1.pop())
print("Top element is:",s1.peek())


        
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr4\StackBasedqueue.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class queue:
    def __init__(self):
        self.inbound_stack = []
        self.outbound_stack = []
    def enqueue(self,data):
        self.inbound_stack.append(data)
        print(f"'{data}' has been added to the queue.")
    def dequeue(self):
        if not self.outbound_stack:
            while self.inbound_stack:
                self.outbound_stack.append(self.inbound_stack.pop())
                if self.outbound_stack:
                    return self.outbound_stack.pop()
                else:
                    print("Queue is empty.Cannot dequeue.")
                    return None
    def size(self):
        return len(self.inbound_stack) + len(self.outbound_stack)
    def display(self):
        if not self.inbound_stack and not self.outbound_stack:
            print("Queue is Empty.")
        else:
            combined_queue = self.outbound_stack[::-1]+self.inbound_stack
            print("Current Queue:",combined_queue)

q1 = queue()
q1.enqueue(14)
q1.enqueue(15)
q1.enqueue(16)

print("The queue is:",q1.display())
print("The size of the queue is:",q1.size())

print("Dequeued Element:",q1.dequeue())

print("The queue is:",q1.display())
print("The size of the queue is:",q1.size())