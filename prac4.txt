
-----------------------------------------------------------------------Practical 4----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Ramdom]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

#Find the Rank of r*c matrix
import numpy as np
from math import isclose

def input_mat(square=False, dtype=float):
    if square:
        r=c = int(input("Enter the dimension of square matrix : "))
    else:
        r = int(input("Enter the number of row : "))
        c = int(input("Enter the number of column : "))

    ret_mat = []
    for i in range(r):
        ret_row = [dtype(input(f"Enter element for position [{i+1},{j+1}]"))
                        for j in range(c)]
        ret_mat.append(ret_row)
    return ret_mat

def echelon_form(mat, pivots=False):
    mat = np.array(mat, dtype=float)
    r, c = mat.shape
    pivot_set = set()
    
    for i in range(min(r, c)):
        # Find first nonzero element in the current column
        for row in range(i, r):
            if not isclose(mat[row, i], 0, abs_tol=1e-08):
                # Swap rows if needed
                if row != i:
                    mat[[i, row]] = mat[[row, i]]
                break
        else:
            # If entire column is zero, move to next column
            continue
        
        pivot = mat[i, i]
        pivot_set.add(i)

        # Make elements below pivot zero
        for next_row in range(i+1, r):
            factor = mat[next_row, i] / pivot
            mat[next_row] -= factor * mat[i]

    return (mat, pivot_set) if pivots else mat

def rank(mat):
    _, pivots = echelon_form(mat, pivots=True)
    return len(pivots)

# Example usage
A = input_mat()  # Example matrix
print("Matrix A :\n", A)
print("Echelon form of A:\n", echelon_form(A))
print("Echelon form of A with pivot columns:\n", echelon_form(A, pivots=True))
print("Rank of A:", rank(A))


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Ramdom2]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx



def echelon_form(mat, pivots = False):
    mat = np.array(mat, dtype=float)
    r,c = mat.shape
    pivot_set = set()
    shift = 0

    for i in range(min(r,c)):
        while i+shift < c and all(isclose(elem,0,abs_tol=1e-08) 
                                        for elem in mat[i:,i+shift]):
            shift += 1
            if i+shift == c:
                break
            pivots = mat[i, i+shift]
            for next_row in range(i+1, r):
                below_pivot = mat[next_row, i+shift]
                if not isclose(below_pivot, 0, abs_tol=1e-08):
                    if not isclose(below_pivot, 0, abs_tol=1e-08):
                        mat[next_row] -= (below_pivot/pivots)*mat[i]
                else:
                    mat[[i, next_row]] = mat[[next_row, i]]
                    pivots = below_pivot
                pivot_set.add(i+shift)
                mat[i, :i+shift] = 0
        if pivots:
            return mat, pivot_set
        return mat
def rank(mat):
    mat, pivots = echelon_form(mat, pivots=True)
    return len(pivots)
A = input_mat()
print("Matrix A : ", A)
print("Echelon form A: \n ",echelon_form(A))
print("Echelon form A , with pivot cloumn : \n", echelon_form(A, pivots=True))
