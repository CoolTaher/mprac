
-----------------------------------------------------------------------Practical 5----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

xxxxxxxxxx[Q1.html]xxxxxxxxxx

#Inner product
def input_Vec(dtype=float):
    dim = int(input("Enter dimension of vectors : "))
    vec = []
    for i in range(dim):
        a = dtype(input(f"Enter elem {i+1} : "))
        vec.append(a)
    return vec
def innerPoduct(vec1, vec2):
    return sum(elem1 * elem2 for elem1, elem2 in zip(vec1, vec2, strict=True))
u = input_Vec()
v = input_Vec()
print("Vector u : " ,u)
print("Vector v : ", v)
print("Inner Product : ", innerPoduct(u, v))


xxxxxxxxxx[Q2.html]xxxxxxxxxx

#Check Orthogonal

from math import isclose
def input_Vec(dtype=float):
    dim = int(input("Enter Dimension of Vector : "))
    vec = []
    for i in range(dim):
        a = dtype(input(f"Enter elem {i+1} : "))
        vec.append(a)
    return vec

def innerProduct(vec1, vec2):
    return sum(elem1*elem2 for elem1, elem2 in zip(vec1, vec2, strict=True))

def isOrthogonal(vec1, vec2):
    return isclose(innerProduct(vec1, vec2), 0, abs_tol=1e-08)

u = input_Vec()
v = input_Vec()
print("Vector u : ", u)
print("Vector v : ", v)
print("<u,v> : ", innerProduct(u,v))
print("Are u, v Orthogonal? : ", isOrthogonal(u,v))

xxxxxxxxxx[Q3.html]xxxxxxxxxx

#Find norm

from math import sqrt 
def inputVec(dtype=float):
    dim = int(input("Enter dimension of Vector : "))
    vec = []
    for i in range(dim):
        a = dtype(input(f"Enter elem {i+1} : "))
        vec.append(a)
    return vec

def innerProduct(vec1, vec2):
    return sum(elem1*elem2 for elem1, elem2 in zip(vec1, vec2, strict=True))

def norm(vec):
    return sqrt(innerProduct(vec, vec))

u = inputVec()
print("Vector u : ", u)
print("||u|| : ", norm(u))

xxxxxxxxxx[Q4.html]xxxxxxxxxx

#Normlize given vector

from math import sqrt
def inputVec(dtype=float):
    dim = int(input("Enter Dimension of vector : "))
    vec = []
    for i in range(dim):
        a = dtype(input(f"Enter elem {i+1} : "))
        vec.append(a)
    return vec

def innerProduct(vec1, vec2):
    return sum(elem1*elem2 for elem1, elem2 in zip(vec1, vec2, strict=True))

def norm(vec1):
    return sqrt(innerProduct(vec1, vec1))

def scale(scalar, vec1):
    return [scalar * elem for elem in vec1]

def Normlize(vec1):
    return scale(1/norm(vec1), vec1)

u = inputVec()
print("Vector u : ", u)
print("||u|| : ", norm(u))
print("Normalize vector : ", Normlize(u))

xxxxxxxxxx[Q5.html]xxxxxxxxxx

#Check Orthonormal

from math import sqrt, isclose
def inputVec(dtype=float):
    dim = int(input("Enter dimension of vector : "))
    vec = []
    for i in range(dim):
        a = dtype(input(f"Enter elem {i+1} : "))
        vec.append(a)
    return vec

def innerProduct(vec1, vec2):
    return sum(elem1*elem2 for elem1, elem2 in zip(vec1, vec2, strict=True))

def are_orthogonal(vec1, vec2):
    return isclose(innerProduct(vec1, vec2), 0, abs_tol=1e-08)

def norm(vec1):
    return sum(innerProduct(vec1, vec1))


def isOrthoNormal(vec1, vec2):
    orthogonal = are_orthogonal(vec1, vec2)
    unit_vec1 = isclose(norm(vec1), 1, abs_tol=1e-08)
    unit_vec2 = isclose(norm(vec2), 1, abs_tol=1e-08)
    return orthogonal and unit_vec1 and unit_vec2

u = inputVec()
v = inputVec()
print("Vector u : ", u)
print("Vector v : ", v)
print("Are u & v Orthogonal : ", are_orthogonal(u,v))
print("Are OrthoNormal : ", isOrthoNormal(u,v))

xxxxxxxxxx[Q6.html]xxxxxxxxxx

#find Angle between two vectors

from math import sqrt, acos, degrees
def inputVec(dtype=float):
    dim = int(input("Enter dimension of Vector : "))
    vec = []
    for i in range(dim):
        a = dtype(input(f"Enter elem {i+1} : "))
        vec.append(a)
    return vec

def innerProduct(vec1, vec2):
    return sum(elem1*elem2 for elem1, elem2 in zip(vec1, vec2, strict=True))

def norm(vec):
    return sqrt(innerProduct(vec, vec))

def Angel(vec1, vec2):
    theta_radian = acos(innerProduct(vec1, vec2)/(norm(vec1) * norm(vec2)))
    return degrees(theta_radian)

u = inputVec()
v = inputVec()
print("Vector u : ", u)
print("Vector v : ", v)
print("Angle between u & v : ", Angel(u, v))

xxxxxxxxxx[Q7.html]xxxxxxxxxx

from math import sqrt, isclose

def inputVec(dtype=float):
    dim = int(input("Enter dimension of vector : "))
    vec = []
    for i in range(dim):
        a = dtype(input(f"Enter elem {i+1} : "))
        vec.append(a)
    return vec

def innerProduct(vec1, vec2):
    return sum(elem1 * elem2 for elem1, elem2 in zip(vec1, vec2))

def are_orthogonal(vec1, vec2):
    return isclose(innerProduct(vec1, vec2), 0, abs_tol=1e-08)

def OrthogonalSet(vectors):
    for i in range(len(vectors)):
        for j in range(i+1, len(vectors)):
            if not are_orthogonal(vectors[i], vectors[j]):
                return False
    return True
    
def main():
    num_vectors = int(input("Enter number of vectors : "))
    vectors = [inputVec() for _ in range(num_vectors)]
    if OrthogonalSet(vectors):
        print("The set of Vectors are Orthogonal.")
    else:
        print("The given vectors are not Orthogonal.")

if __name__ == "__main__":
    main()
