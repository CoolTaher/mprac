
-----------------------------------------------------------------------Practical 5----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q1.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

'''#Accept 2 vectors from user and find inner product[Q1]

def input_vec(dtype=float):
    dim=int(input("Enter the dimension of vector:"))
    vec=[]
    for i in range(dim):
        a=dtype(input(f"Enter an element {i+1}:"))
        vec.append(a)
    return vec

def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))

u=input_vec()
v=input_vec()
print("Vector u:", u)
print("Vector v:", v)
print("<u,v>:",inner_product(u,v))

#for predefined vector
u=[3,2,4]
v=[2,1,5]

def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))
print("Vector u:", u)
print("Vector v:", v)
print("<u,v>:",inner_product(u,v))'''

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q2.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

'''#Accept 2 vectors from user and check if they are orthogonal[Q2]
from math import isclose

def input_vec(dtype=float):
    dim=int(input("Enter the dimension of vector:"))
    vec=[]
    for i in range(dim):
        a=dtype(input(f"Enter an element {i+1}:"))
        vec.append(a)
    return vec

def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))

def are_orthogonal(v1,v2):
    return isclose(inner_product(v1,v2),0,abs_tol=1e-08)

u=input_vec()
v=input_vec()
print("Vector u:", u)
print("Vector v:", v)
print("<u,v>:",inner_product(u,v))
print("Are u and v are orthogonal? :", are_orthogonal(u,v))

#for predefined vector
u=[3,2,4]
v=[2,1,5]

def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))
def are_orthogonal(v1,v2):
    return isclose(inner_product(v1,v2),0,abs_tol=1e-08)
print("Vector u:", u)
print("Vector v:", v)
print("<u,v>:",inner_product(u,v))
print("Are u and v are orthogonal? :", are_orthogonal(u,v))'''

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q3.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

'''#Accept vecvtor from user and find it's norm[Q3]
from math import sqrt
def input_vec(dtype=float):
    dim=int(input("Enter the dimension of the vector:"))
    vec=[]
    for i in range(dim):
        a=dtype(input(f"Enter an element {i+1}:"))
        vec.append(a)
    return vec

def inner_product(v1,v2):
    return sum(e1*e2 for e1,e2 in zip(v1,v2,strict=True))

def norm(v):
    return sqrt(inner_product(v,v))

u=input_vec()
print("Vector u:", u)
print("||u||:",norm(u))

#for predined vec
u=[3,2,4]

def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))
def norm(v):
    return sqrt(inner_product(v,v))
print("Vector u:", u)
print("||u||:",norm(u))'''

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q4.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

'''#Accept  vecvtor from user and normalise it[Q4]
from math import sqrt
def input_vec(dtype=float):
    dim=int(input("Enter the dimension of the vector:"))
    vec=[]
    for i in range(dim):
        a=dtype(input(f"Enter an element {i+1}:"))
        vec.append(a)
    return vec

def inner_product(v1,v2):
    return sum(e1*e2 for e1,e2 in zip(v1,v2,strict=True))

def norm(v):
    return sqrt(inner_product(v,v))

def scale(s,v):
    return[s*e for e in v]

def normalise(v):
    return scale(1/norm(v),v)
    
u=input_vec()
print("Vector u:", u)
print("||u||:",norm(u))
print("Normalised u:",normalise(u))

#for predined vec
u=[3,2,4]
def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))
def norm(v):
    return sqrt(inner_product(v,v))
def scale(s,v):
    return[s*e for e in v]
def normalise(v):
    return scale(1/norm(v),v)
print("Vector u:", u)
print("||u||:",norm(u))
print("Normalised u:",normalise(u))'''

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q5.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

'''#accept 2 vectors from the user and check if it's orthonormal or not[Q5]
from math import isclose,sqrt

def input_vec(dtype=float):
    dim=int(input("Enter the dimension of vector:"))
    vec=[]
    for i in range(dim):
        a=dtype(input(f"Enter an element {i+1}:"))
        vec.append(a)
    return vec

def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))

def norm(v):
    return sqrt(inner_product(v,v))

def is_orthonormal(v1, v2):
    orthogonal = inner_product(v1, v2) == 0

    unit_norm_v1 = norm(v1) == 1
    unit_norm_v2 = norm(v2) == 1
    return orthogonal and unit_norm_v1 and unit_norm_v2

u=input_vec()
v=input_vec()
print("Vector u:", u)
print("Vector v:", v)
print("<u,v>:",inner_product(u,v))
print("Are u and v are orthonormal? :", is_orthonormal(u,v))

#for predefined vector
u=[0,0,1]
v=[0,1,0]

def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))
def norm(v):
    return sqrt(inner_product(v,v))
def is_orthonormal(v1, v2):
    orthogonal = inner_product(v1, v2) == 0
    unit_norm_v1 = norm(v1) == 1
    unit_norm_v2 = norm(v2) == 1
    return orthogonal and unit_norm_v1 and unit_norm_v2

print("Vector u:", u)
print("Vector v:", v)
print("<u,v>:",inner_product(u,v))
print("Are u and v are orthonormal? :", is_orthonormal(u,v))'''

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q6.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

'''#Accept 2 vectors from user and check for angle between them[Q6]
from math import sqrt,acos,degrees
def input_vec(dtype=float):
    dim=int(input("Enter the dimension of the vector:"))
    vec=[]
    for i in range(dim):
        a=dtype(input(f"Enter an element {i+1}:"))
        vec.append(a)
    return vec

def inner_product(v1,v2):
    return sum(e1*e2 for e1,e2 in zip(v1,v2,strict=True))

def norm(v):
    return sqrt(inner_product(v,v))

def angle(v1,v2):
    theta_radians = acos(inner_product(v1,v2)/ norm(v1)*norm(v2))
    return degrees(theta_radians)
    
u=input_vec()
v=input_vec()
print("Vector u:", u)
print("Vector v:", v)
print("angle between u and v(in degrees):",angle(u,v))

#for predined vec
u=[3,0,0]
v=[0,2,1]
def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))
def norm(v):
    return sqrt(inner_product(v,v))
def angle(v1,v2):
    theta_radians = acos(inner_product(v1,v2)/ norm(v1)*norm(v2))
    return degrees(theta_radians)

print("Vector u:", u)
print("Vector v:", v)
print("angle between u and v(in degrees):",angle(u,v))'''

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q7.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

#Accept  set of vectors from user anf chect if set is orthogonal[Q7]
from math import isclose
   
def input_vec(dtype=float):
    dim=int(input("Enter the dimension of vector:"))
    vec=[]
    for i in range(dim):
        a=dtype(input(f"Enter an element {i+1}:"))
        vec.append(a)
    return vec

def inner_product(v1,v2):
    return sum((e1*e2) for e1,e2 in zip(v1,v2,strict=True))

def are_orthogonal(v1,v2):
    return isclose(inner_product(v1,v2),0,abs_tol=1e-08)

num_vectors = int(input("Enter the number of vectors: "))
vectors = []
for i in range(num_vectors):
    print(f"Enter vector {i+1}:")
    vec = input_vec()
    vectors.append(vec)
orthogonal = True
for i in range(num_vectors):
    for j in range(i+1, num_vectors):
        if not are_orthogonal(vectors[i], vectors[j]):
            orthogonal = False
            print(f"Vectors {i+1} and {j+1} are not orthogonal.")
            break

if orthogonal:
    print("All vectors are orthogonal to each other.")
else:
    print("Not all vectors are orthogonal.")
