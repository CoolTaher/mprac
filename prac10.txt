
-----------------------------------------------------------------------Practical 10 ----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Pr6\Cramer's Rule.py]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

import numpy as np
def cramer_rule(A,b):
    n = len(b)
    det_A = np.linalg.det(A)

    if det_A == 0:
        raise ValueError("This system has no unique solution(determinant is zero")

    x = np.zeros(n)
    for i in range(n):
        A_i = A.copy()
        A_i[:,i]=b
        x[i] = np.linalg.det(A_i)/det_A
    return x

A = np.array([[4,-3],[2,5]],dtype=float)
b = np.array([5,1],dtype=float)
solution = cramer_rule(A,b)
print("Solution :",solution)



xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Pr6\Gaussian Elimination.py]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

import numpy as np
import sympy as sp

n = int(input("Enter the number of equations: "))
m = int(input("Enter the number of variables: "))

variables = sp.symbols(' '.join([f'x{i+1}' for i in range(m)]))

A = np.array([list(map(float, input(f"Enter coefficients of equation {i+1} (space seperated): ").split())) for i in range(n)])

b = np.array(list(map(float, input("Enter the right hand constant terms (space seperated): ").split())))

A_sym = sp.Matrix(A)
b_sym = sp.Matrix(b)

# Solve using SymPy (handles any case)
solution = sp.linsolve((A_sym, b_sym), *variables)

# Print the solution
print("\nSolution:")
if len(solution) == 0:
    print("No solution exists.")
elif len(solution) == 1:
    print("Unique solution:")
    for sol in solution:
        for var, val in zip(variables, sol):
            print(f"{var} = {val}")
else:
    print("Infinite solutions:")
    print(solution)



xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q3.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

#Q3 Prac 10
#Implement back substition(user input)
import numpy as np
import sympy as sp

n = int(input("Enter the number of equations: "))
m = int(input("Enter the number of variables: "))

variables = sp.symbols(' '.join([f'x{i+1}' for i in range(m)]))

U = np.array([list(map(float, input(f"Enter coefficients of equation {i+1} (space seperated): ").split())) for i in range(n)])

b = np.array(list(map(float, input("Enter the right hand constant terms (space seperated): ").split())))

A_sym = sp.Matrix(U)
b_sym = sp.Matrix(b)

def back_substitution(U, b):
    n = len(b)
    x = np.zeros(n)
    
    for i in range(n-1, -1, -1):
        x[i] = (b[i] - np.dot(U[i, i+1:], x[i+1:])) / U[i, i]
    
    return x

# Prdefined matrix
'''U = np.array([[2, -1, 1], [0, 3, 9], [0, 0, 5]], dtype=float)  # Upper triangular matrix
b = np.array([2, -1, 4], dtype=float)'''
solution = back_substitution(U, b)
print("Solution:", solution)