
-----------------------------------------------------------------------Practical 6----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

xxxxxxxxxx[Q1.html]xxxxxxxxxx

#Gram schmidth Method
from math import sqrt
def input_vec(dtype=float):
    dim = int(input("Enter the dimension of vector : "))
    vec = []
    for i in range(dim):
        a = int(input(f"Enter element {i+1} : "))
        vec.append(a)
    return vec
def scale(scalar, vec):
    return [scalar * elem for elem in vec]
def sub(vec1, vec2):
    return [elem1 - elem2 for elem1, elem2 in zip(vec1, vec2, strict=True)]
def dot_product(vec1, vec2):
    return sum(elem1*elem2 for elem1, elem2 in zip(vec1, vec2, strict=True))
def norm(vec):
    return sqrt(dot_product(vec, vec))
def gram_schmidth(*vecs):
    ortho_set = []
    for vec in vecs:
        res = vec
        for ortho_vec in ortho_set:
            proj = scale(dot_product(vec, ortho_vec) / dot_product(ortho_vec, ortho_vec), ortho_vec)
        ortho_set.append([round(elem, 4) for elem in res])
    return ortho_set

u = input_vec()
v = input_vec()

print("Set of (u, v)", (u, v))
print("Othogonalization set from set (u, v) : ", gram_schmidth(u, v))


xxxxxxxxxx[Q2.html]xxxxxxxxxx

#Gram Schmidth Method and check Orthogonalization
from math import sqrt
def input_vec(dtype=float):
    dim = int(input("Enter the dimension of vector : "))
    vec = []
    for i in range(dim):
        a = dtype(input(f"Enter element {i+1} : "))
        vec.append(a)
    return vec
def scale(scalar, vec):
    return [scalar * elem for elem in vec]
def sub(vec1, vec2):
    return [elem1 - elem2 for elem1, elem2 in zip(vec1, vec2, strict=True)]
def dot_product(vec1, vec2):
    return sum(elem1*elem2 for elem1, elem2 in zip(vec1, vec2, strict=True))
def norm(vec):
    return sqrt(dot_product(vec, vec))
def gram_schmidth(*vecs, normalize=True):
    ortho_set = []
    for vec in vecs:
        res = vec
        for ortho_vec in ortho_set:
            proj = scale(dot_product(vec, ortho_vec) / dot_product(ortho_vec, ortho_vec), ortho_vec)
            res = sub(res, proj)
        res_norm = norm(res)
        res = scale(1/res_norm,res)
        ortho_set.append([round(elem, 4) for elem in res])
    return ortho_set

u = input_vec()
v = input_vec()
w = input_vec()

print("Set of (u, v, w)", (u, v, w))
print("Othogonalization set from set (u, v, w) : ", gram_schmidth(u, v, w))