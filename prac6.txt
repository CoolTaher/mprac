
-----------------------------------------------------------------------Practical 6----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q1.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

'''#Implement gram-schmidt orthogonalisation process on set of vectors to construct orthogonal set[Q1]
from math import sqrt

def input_vector(dtype=float):
    dim = int(input("Enter dimension of vector: "))
    return [dtype(input(f"Enter element {i+1}: ")) for i in range(dim)]

def scale_vector(s,v):
    return [s*e for e in v]

def subtract_vectors(v1, v2):
    return [e1 - e2 for e1, e2 in zip(v1, v2, strict=True)]

def dot_product(v1, v2):
    return sum(e1*e2 for e1,e2 in zip(v1, v2, strict=True))

def norm(v):
    return sqrt(dot_product(v, v))

def gram_schmidt(*vectors):
    orthogonal_set = [ ]
    for v in vectors:
        residual = v
        for ortho_vec in orthogonal_set:
            proj = scale_vector(dot_product(v, ortho_vec) / dot_product(ortho_vec, ortho_vec), ortho_vec)
            residual = subtract_vectors(residual, proj)
        orthogonal_set.append([round(e, 8) for e in residual])
    return orthogonal_set

#Input vectors
u = input_vector()
v = input_vector()
w =input_vector()

print("Original vectors:")
print("u =", u)
print("v =", v)
print("w =", w)

orthogonal_vectors = gram_schmidt(u, v, w)#Perform Gram-Schmidt orthogonalization
print("\nOrthogonalized vectors:")
for i, v in enumerate(orthogonal_vectors):
    print(f"v{i+1} =", v)

#Predefined vectors
u=[4,2,0]
v=[1,4,2]
w=[0,2,4]

def scale_vector(s,v):
    return [s*e for e in v]

def subtract_vectors(v1, v2):
    return [e1 - e2 for e1, e2 in zip(v1, v2, strict=True)]

def dot_product(v1, v2):
    return sum(e1*e2 for e1,e2 in zip(v1, v2, strict=True))

def norm(v):
    return sqrt(dot_product(v, v))

def gram_schmidt(*vectors):
    orthogonal_set = [ ]
    for v in vectors:
        residual = v
        for ortho_vec in orthogonal_set:
            proj = scale_vector(dot_product(v, ortho_vec) / dot_product(ortho_vec, ortho_vec), ortho_vec)
            residual = subtract_vectors(residual, proj)
        orthogonal_set.append([round(e, 8) for e in residual])
    return orthogonal_set

print("Original vectors:")
print("u =", u)
print("v =", v)
print("w =", w)

orthogonal_vectors = gram_schmidt(u, v, w)

print("\nOrthogonalized vectors:")
for i, v in enumerate(orthogonal_vectors):
    print(f"v{i+1} =", v)'''


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q2.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

#Implement gram-schmidt orthogonalisation process on set of vectors to construct orthonormal set[Q2]
from math import sqrt

def input_vector(dtype=float):
    dim = int(input("Enter dimension of vector: "))
    return [dtype(input(f"Enter element {i+1}: ")) for i in range(dim)]

def scale_vector(s,v):
    return [s*e for e in v]

def subtract_vectors(v1, v2):
    return [e1 - e2 for e1, e2 in zip(v1, v2, strict=True)]

def dot_product(v1, v2):
    return sum(e1*e2 for e1,e2 in zip(v1, v2, strict=True))

def norm(v):
    return sqrt(dot_product(v, v))

def gram_schmidt(*vectors):
    orthogonal_set = [ ]
    for v in vectors:
        residual = v
        for ortho_vec in orthogonal_set:
            proj = scale_vector(dot_product(v, ortho_vec) / dot_product(ortho_vec, ortho_vec), ortho_vec)
            residual = subtract_vectors(residual, proj)
        residual_norm = norm(residual)
        if residual_norm !=0:
            residual = scale_vector(1/residual_norm, residual)
            orthogonal_set.append([round(e, 8) for e in residual])
    return orthogonal_set

#Input vectors
u = input_vector()
v = input_vector()
w =input_vector()

print("Original vectors:")
print("u =", u)
print("v =", v)
print("w =", w)
print("\nOrthonormalised set from set(u,v) :",gram_schmidt(u, v, w))

#Predefined vectors
u=[4,2,0]
v=[1,4,2]
w=[0,2,4]

def scale_vector(s,v):
    return [s*e for e in v]

def subtract_vectors(v1, v2):
    return [e1 - e2 for e1, e2 in zip(v1, v2, strict=True)]

def dot_product(v1, v2):
    return sum(e1*e2 for e1,e2 in zip(v1, v2, strict=True))

def norm(v):
    return sqrt(dot_product(v, v))

def gram_schmidt(*vectors):
    orthogonal_set = [ ]
    for v in vectors:
        residual = v
        for ortho_vec in orthogonal_set:
            proj = scale_vector(dot_product(v, ortho_vec) / dot_product(ortho_vec, ortho_vec), ortho_vec)
            residual = subtract_vectors(residual, proj)
        residual_norm = norm(residual)
        if residual_norm !=0:
            residual = scale_vector(1/residual_norm, residual)
            orthogonal_set.append([round(e, 8) for e in residual])
    return orthogonal_set

print("Original vectors:")
print("u =", u)
print("v =", v)
print("w =", w)
print("\nOrthonormalised set from set(u,v) :",gram_schmidt(u, v, w))