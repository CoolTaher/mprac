-----------------------------------------------------------------------Practical 3 ----------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr3\CLL.PY]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class Node:
    def __init__(self,data=None):
        self.data = data 
        self.next = None
        self.prev = None
        
class DCL:
    def __init__(self):
        self.head  = None
        self.size = 0
    def clear(self):
        self.head = None
        self.size = 0
    
    def append(self,data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            new_node.next = new_node
            new_node.prev = new_node
        else:
            tail = self.head.prev
            tail.next = new_node
            new_node.prev = tail
            new_node.next = self.head
            self.head.prev = new_node
        self.size += 1

    def traverse_forward(self):
        if self.head is None:
            print("The list is empty.")
            return
        current = self.head
        position = 1
        print("Forward traversal:")
        while True:
            print(f"Position {position}:{current.data}")
            current = current.next
            position += 1
            if current == self.head:
                break
    def traverse_backward(self):
        if self.head is None:
            print("The list is empty.")
            return
        current = self.head.prev
        position = self.size
        print("Backward traversal:")
        while True:
            print(f"Position {position}:{current.data}")
            current = current.prev
            position -= 1
            if current == self.head.prev:
                break

    def delete(self,data):
        if self.head is None:
            print("The list is Empty.")
            return 
        current = self.head
        position = 1
        while True:
            if current.data == data:
                print(f"Element '{data}' is at position '{position}' in the circular list.")
                if self.size == 1:
                    self.clear()
                else:
                    prev_node = current.prev
                    next_node = current.next
                    prev_node.next = next_node
                    next_node.prev = prev_node
                    if current == self.head:
                        self.head = next_node
                        self.size -= 1
                        print(f"Deleted '{data}'.")
                        return
                    current = current.next
                    position += 1
                    if current == self.head:
                        break
                    print(f"'{data}' not found in the list.")
    def iter(self):
        if self.head is None:
            return
        current = self.head
        for _ in range (self.size):
            yield current.data
            current = current.next
    
    def main():
        dcl = DCL()
        while True:
            print("\n--Circular Linked List--")
            print("1.Append an element")
            print("2.Traverse the list forward")
            print("3.Traverse the list backward")
            print("4.Delete an element")
            print("5.Display the list")
            print("6.Exit")
            choice = input("Enter your choice (1-6):")
            if choice == "1":
                data = input("Enter data to append:")
                dcl.append(data)
                print(f"Appended '{data}' to the list.")
            elif choice == "2":
                dcl.traverse_forward()
            elif choice == "3":
                dcl.traverse_backward()
            elif choice == "4":
                data = input("Enter the data to delete:")
                dcl.delete(data)
            elif choice == "5":
                print("The list contains:")
                if dcl.size == 0:
                    print("List is empty.")
                else:
                    for item in dcl.item():
                        print(item,end = " ")
                    print()
            elif choice == "6":
                print("Exiting progarm.")
                break
            else:
                print("Invalid choice.Please enter a number between 1 to 6.")
 
if __name__=="__main__":
    DCL.main()




XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr3\DLL.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class Node:
    def __init__(self,data=None,next=None,prev=None):
        self.data=data
        self.next=next
        self.prev=prev

class DLL:
    def __init__(self):
        self.head=None
        self.tail=None
        self.count = 0

    def append(self,data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            self.tail = self.head
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node
        self.count += 1
    
    def print_forward(self):
        current = self.head
        while current:
            print(current.data,end=" ")
            current = current.next
        print()

    def print_backward(self):
        current = self.tail
        while current:
            print(current.data,end=" ")
            current = current.prev
        print() 

    def delete(self, data):
        current = self.head
        node_deleted = False
        if current is None:
            node_deleted = False

        elif current.data == data:
            self.head = current.next
            self.head.prev = None
            node_deleted = True

        elif self.tail.data == data:
            self.tail = self.tail.prev
            self.tail.next = None
            node_deleted = True

        else:
            while current:
                if current.data == data:
                    current.prev.next = current.next
                    current.next.prev = current.prev
                    node_deleted = True
                current = current.next

        if node_deleted:
            self.count -= 1
        
    def search_position(self,data):
        current = self.head
        position = 1
        while current:
            if current.data == data:
                return position
            current = current.next
            position += 1
        return - 1
        
    def get_data_at_position(self,position):
        if position <= 0 or position>self.count:
            return None
        current = self.head
        current_position=1
        while current:
            if current_position == position:
                return current.data
            current = current.next
            current_position+=1
        return None
        
    def get_position(self,data):
        current = self.head
        position = 1
        while current:
            if current.data == data:
                return position
            current = current.next
            position += 1
        return - 1
    def modify(self,old_data,new_data):
        current = self.head
        while current:
            if current.data == old_data:
                current.data = new_data
                return True
            current = current.next
        return False
        
    def main():
        dll = DLL()
        while True:
            print("\n--Doubly Linked List--")
            print("1.Append an item")
            print("2.Search an item")
            print("3.Access item by position")
            print("4.Delete an item")
            print("5.Modify an item")
            print("6.Print the list forward")
            print("7.Print the list backward")
            print("8.Exit")
            choice = input("Enter your choice(1-7):")
            if choice == "1":
                data = input("Enter the value to append:")
                dll.append(data)
                print(f"Appended '{data}' to the list.")
            elif choice == "2":
                data = input("Enter the value to search:")
                position = dll.search_position(data)
                if position!=-1:
                    print(f"Data '{data}' found at position '{position}'.")
                else:
                    print(f"Data '{data}' not foundin the list.")
            elif choice == "3":
                try:
                    position = int(input("Enter the position (1-based):"))
                    result = dll.get_data_at_position(position)
                    if result is not None:
                        print(f"Data at position {position}:{result}")
                    else:
                        print("Invalid position enter a valid position within the list.")
                except ValueError:
                    print("Please enter the valid integet for the position.")
            elif choice == "4":
                data = input("Enter the value to delete:")
                dll.delete(data)
                print("List after deletion:")
                dll.print_forward()
            elif choice == "5":
                old_data = input("Enter the value to modify:")
                new_data = input("Enter the new value:")
                if dll.modify(old_data,new_data):
                    position = dll.get_position(new_data)
                    if position != 1:
                        print(f"Element Modified.New {new_data},position:{position}")
                    else:
                        print("Element position not found.")
                else:
                    print(f"Data '{old_data}' not found for modification.")
            elif choice == "6":
                print("List (forward):")
                dll.print_forward()
            elif choice == "7":
                print("List (backward):")
                dll.print_backward()
            elif choice =="8":
                print("Exiting progarm.")
                break
            else:
                print("Invalid choice.Please enter a number between 1 to 8.")
 
if __name__=="__main__":
    DLL.main()

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr3\SLL.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class Node:
    def __init__(self,data=None):
        self.data = data
        self.next = None

class SLL:
    def __init__(self):
        self.tail = None
        self.head = None
        self.count = 0
        
    def append(self,data):
        node = Node(data)
        if self.head:
            self.head.next = node
        else:
            self.tail = node
            self.head = node
            self.count += 1

    def iter(self):
        current = self.tail
        while current:
            yield current.data
            current = current.next
    
    def delete(self,data):
        current = self.tail
        prev = None
        while current:
            if current.data == data:
                if prev:
                    prev.next = current.next
                else:
                    self.head = current.next
                if current == self.tail:
                    self.tail = prev
                self.count -= 1 
                return
            prev = current
            current = current.next

    def search(self,data):
        current = self.tail
        while current:
            if current.data == data:
                return True
            current = current.next
        return False

    def main():
        words = SLL()

        while True:
            print("\n--Singly Linked List Operations")
            print("1.Append an item")
            print("2.Search an item")
            print("3.Display an item")
            print("4.Delete an item")
            print("5.Exit")

            choice = input("Enter your choice(1-5):")

            if choice =="1":
                data = input("Enter the value to append:")
                words.append(data)
                print(f"Appended '{data}' to the list.")
            elif choice =="2":
                data = input("Enter the value to search:")
                if words.search(data):
                    print(f"{data} is in the list")
                else:
                    print(f"{data} is not in the list")
            elif choice =="3":
                print("The list contins:")
                for word in words.iter():
                    print(word,end=" ")
                print("\n List Size:",words.count)
            elif choice =="4":
                data = input("Enter the value to delete:")
                if words.search(data):
                    words.delete(data)
                    print(f"{data} is deleted")
                else:
                    print(f"{data} is not found the list")
            elif choice =="5":
                print("Exiting progarm.")
                break
            else:
                print("Invalid choice.Please enter a number between 1 to 5.")

if __name__=="__main__":
    SLL.main()



