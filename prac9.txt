-----------------------------------------------------------------------Practical 9 ----------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr9\InToPost.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def precedence(op):
    if op == '^':
        return 3
    elif op in ('*', '/'):
        return 2
    elif op in ('+', '-'):
        return 1
    return 0

def infix_to_postfix(expression):
    stack = []
    postfix = ''

    for char in expression:
        if char.isalnum():
            postfix += char
        elif char == '(':
            stack.append(char)
        elif char == ')':
            while stack and stack[-1] != '(':
                postfix += stack.pop()
            stack.pop()  
        else:
            while stack and precedence(stack[-1]) >= precedence(char):
                postfix += stack.pop()
            stack.append(char)

    while stack:
        postfix += stack.pop()
    return postfix

infix_expr = input("Enter the infix expression: ")
postfix_expr = infix_to_postfix(infix_expr)
print("Postfix expression:", postfix_expr)




XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr9\PostToIn.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

class TreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def breadthfirst_traversal(root):
    if root is None:
        return
    queue = [root]
    while queue:
        node = queue.pop(0)
        print(node.data, end=" ")
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)

root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)

print("Breadth-First (Level-Order) Traversal:")
breadthfirst_traversal(root)


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr9\PostToPre.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def postfix_to_prefix(expression):
    stack = []
    operators = set(['+', '-', '*', '^', '/'])

    for char in expression:
        if char.isalnum():  
            stack.append(char)
        elif char in operators:  
            if len(stack) < 2:
                return "Invalid postfix expression"
            operand2 = stack.pop()
            operand1 = stack.pop()
            new_expr = f"({char} {operand1} {operand2})"
            stack.append(new_expr)
    
    if len(stack) != 1:
        return "Invalid postfix expression"
    return stack[0]

postfix_expr = input("Enter the postfix expression: ")
prefix_expr = postfix_to_prefix(postfix_expr)
print("prefix expression:", prefix_expr)


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[Pr9\PreToIn.py]XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def prefix_to_infix(expression):
    stack = []
    operators = set(['+', '-', '*', '/', '^'])

    for char in reversed(expression):
        if char.isalnum(): 
            stack.append(char)
        elif char in operators: 
            if len(stack) < 2:
                return "Invalid prefix expression"
            operand1 = stack.pop()
            operand2 = stack.pop()
            new_expr = f"({operand1} {char} {operand2})"
            stack.append(new_expr)

    if len(stack) != 1:
        return "Invalid prefix expression"
    return stack[0]

prefix_expr = input("Enter the prefix expression: ")
infix_expr = prefix_to_infix(prefix_expr)
print("Infix expression:", infix_expr)


