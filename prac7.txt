
-----------------------------------------------------------------------Practical 7----------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q1.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

#Find charcteristic equation of matrix(user input)[Q1]
'''from sympy import Symbol, eye, det, Matrix, S

def input_mat(square=False, dtype=float):  #for user input
    if square:
        r=c=int(input("Enter the dimension of square matrix:"))
    else:
        r=int(input("Enter the no.of rows:"))
        c=int(input("Enter the no.of cols:"))

    ret_mat=[]
    for i in range(r):
        ret_row=[dtype(input(f"Enter elements for position [{i+1},{j+1}]:"))for j in range(c)]
        ret_mat.append(ret_row)
    return ret_mat

def get_A_LI(mat,var='lambda'):
    r,c=mat.shape
    L=Symbol(var)
    I=eye(r)

    return mat - L*I

def charc_poly(mat,var='lambda'):
    A_LI = get_A_LI(mat,var=var)

    return det(A_LI).as_poly().monic()

A=Matrix(input_mat(square=True,dtype=float))
#A=Matrix([[1,2,4],[5,6,3],[7,6,1]])#for predefined matrix
print("Matrix A:",A)
print("Charcteristic ploynomial of A:",charc_poly(A))'''


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[Q2.html]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

#Q2
#Find minimal polynomial of matrix(user input)[Q2]
import sympy as sp

def getMatrix():
    r = int(input("Enter no of rows: "))
    c = int(input("Enter no of cols: "))

    if r != c:
        print("Matrix must be square")
        return None

    matrix = []
    for i in range(r):
        row = []
        for j in range(c):
            e = int(input(f"Enter element at position ({i + 1}, {j + 1}): "))
            row.append(e)
        matrix.append(row)

    return matrix

x = sp.symbols('x')
matrix_data = getMatrix()

if matrix_data:
    A = sp.Matrix(matrix_data)
    n = A.shape[0]
    I = sp.eye(n)

    charpoly_expr = A.charpoly(x).as_expr()
    print("Characteristic Polynomial:", charpoly_expr)

    eigs = A.eigenvals()
    print("Eigenvalues:", eigs)

    # Cayleyâ€“Hamilton approach to find the Minimal Polynomial
    min_poly = 1
    for r, alg_mult in eigs.items():
        d = 1
        while True:
            M = (A - r * I) ** d
            nullity = len(M.nullspace())
            if nullity == alg_mult:
                break
            d += 1
        min_poly *= (x - r) ** d

    print("Minimal Polynomial (Cayley-Hamilton):", min_poly)
    print("Expanded Minimal Polynomial:", sp.expand(min_poly))
